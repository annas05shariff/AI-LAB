TIC TAC TOE

import math



def print_board(board):
    
    print("\n-------------")
    print(f"| {board[0]} | {board[1]} | {board[2]} |")
    print("-------------")
    print(f"| {board[3]} | {board[4]} | {board[5]} |")
    print("-------------")
    print(f"| {board[6]} | {board[7]} | {board[8]} |")
    print("-------------")

def check_win(board, player):
    
    win_conditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]             # Diagonals
    ]
    for condition in win_conditions:
        if all(board[i] == player for i in condition):
            return True
    return False

def check_draw(board):
    
    return ' ' not in board

def is_valid_move(board, move):
    
    return 0 <= move < 9 and board[move] == ' '


def minimax(board, is_maximizing):
    if check_win(board, 'O'):
        return 1
    if check_win(board, 'X'):
        return -1
    if check_draw(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, False)
                board[i] = ' '  # Undo the move
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, True)
                board[i] = ' '  # Undo the move
                best_score = min(score, best_score)
        return best_score

def find_best_move(board):
    
    best_score = -math.inf
    best_move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
    return best_move



def main():
    
    board = [' ' for _ in range(9)]
    print("Welcome to Tic-Tac-Toe!")
    print("You are 'X', the AI is 'O'.")
    print("Enter a number from 0-8 to make a move.")
    print("The board positions are as follows:")
    print_board([0, 1, 2, 3, 4, 5, 6, 7, 8])
    print_board(board)

    current_player = 'X'
   
    while True:
        if current_player == 'X':
            try:
                move = int(input("\nEnter your move (0-8): "))
                if is_valid_move(board, move):
                    board[move] = 'X'
                    current_player = 'O'
                else:
                    print("Invalid move. Try again.")
                    continue
            except ValueError:
                print("Invalid input. Please enter a number.")
                continue
        else: # AI's turn
            print("\nAI is thinking...")
            move = find_best_move(board)
            board[move] = 'O'
            current_player = 'X'
            print(f"AI chose move {move}.")

        print_board(board)

        if check_win(board, 'X'):
            print("\nCongratulations! You won!")
            break
        elif check_win(board, 'O'):
            print("\nAI wins! Better luck next time.")
            break
        elif check_draw(board):
            print("\nIt's a draw!")
            break

if __name__ == "__main__":
    main()


VACCUM CLEANER
import random
import time

class VacuumCleaner:
    def __init__(self):
        
        self.quadrants = ["Q1", "Q2", "Q3", "Q4"]
        self.status = {q: random.choice(["clean", "dirty"]) for q in self.quadrants}
        self.current_index = 0
    
    def clean(self, quadrant):
        print(f"Vacuum is cleaning {quadrant}...")
        time.sleep(1)  
        self.status[quadrant] = "clean"
        print(f"{quadrant} is now clean.")
    
    def move_next(self):
        self.current_index = (self.current_index + 1) % len(self.quadrants)
        next_quadrant = self.quadrants[self.current_index]
        print(f"Vacuum moves to {next_quadrant}")
    
    def start(self, cycles=2):
        print("Starting Vacuum Cleaner...")
        for _ in range(cycles * len(self.quadrants)):
            current_quadrant = self.quadrants[self.current_index]
            print(f"\nChecking {current_quadrant}...")
            
            if self.status[current_quadrant] == "dirty":
                self.clean(current_quadrant)
            else:
                print(f"{current_quadrant} is already clean. Skipping.")
            
            self.move_next()
        
        print("\nFinished cleaning cycles!")
        print("Final status:", self.status)


vacuum = VacuumCleaner()
vacuum.start(cycles=2)  
