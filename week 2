import heapq

goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

def flatten(state):
    return tuple(sum(state, []))

def misplaced_tiles(state):
    count = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0 and state[i][j] != goal_state[i][j]:
                count += 1
    return count

def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def get_neighbors(state):
    neighbors = []
    x, y = find_blank(state)
    moves = [(1,0), (-1,0), (0,1), (0,-1)]
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

def solve_puzzle(start_state):
    pq = []
    heapq.heappush(pq, (misplaced_tiles(start_state), 0, start_state, []))
    visited = set()
    while pq:
        f, g, state, path = heapq.heappop(pq)
        if flatten(state) in visited:
            continue
        visited.add(flatten(state))
        if state == goal_state:
            return path + [state]
        for neighbor in get_neighbors(state):
            if flatten(neighbor) not in visited:
                h = misplaced_tiles(neighbor)
                heapq.heappush(pq, (g + 1 + h, g + 1, neighbor, path + [state]))
    return None

if __name__ == "__main__":
    start = [[1, 2, 3],
             [4, 0, 6],
             [7, 5, 8]]
    solution = solve_puzzle(start)
    if solution:
        print("✅ Solution found in", len(solution)-1, "moves:")
        for step in solution:
            for row in step:
                print(row)
            print()
    else:
        print("❌ No solution found.")
